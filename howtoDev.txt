@willandru
Kali Linux
PERN STACK APPLICATION: NOTES
December-07-2021
-----------------------------------------------------------
                HOW TO DEV PERN
-----------------------------------------------------------
INIT THE PROJECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Soo first of all, have to have installed npm and postgresql

:: 
npm init i --> will create config files

::Install dependencies
 npm i express morgan cors            

::Install Dev dependencies
npm i nodemon -D  

::Change package.json   
"scripts": {
    "start": "node src/index.js",
    "dev": "nodemon src/index.js"
  }
:: Create folders and files asrchitecture.
-----------------------------------------------------------
-----------------------------------------------------------
ENDPOINTS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
tasks.routes.js
 Vamos a definir las URLS que el frontend va a poder utilizar para poder hacer operaciones

 funcion router desde express---> devuelve un objeto llamado router, que nos va a permitir crear las URLS

Se creo el CRUD de la aplicaciÃ³n
-----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
CONEXION A LA BASE DE DADTOS

npm i pg

--------------------------------------------------------------
--------------------------------------------------------------

CREAR FUNCIONES CRUD y manejar los errores con el framework de express
__________________________________________________________---
__________________________________________________________---

OCULTAR LAS CREDENCIALES, CREAR ARCHIVHOVO DE CONFIGURACION 
  
npm i dotenv

terminarmos creando el archivo .env para cuadrar las configuraciones en config.js
y creamos el archivo .gitignore
-----------------------------------------------------------------
-----------------------------------------------------------
CONECTAMOS EL BACKEND CON EL FRONTEND

Por ultimo conectamos el backen
ya instalado el module 'corse', simplemente lo requerimos en index.js

---------------------------------------------------------------------------------
---------------------------------------------------------------------------------

INICIAMOS CON FRONT-END

Iniciamos haciendo:
npx create-react-app
--> Se abre otro puerto (3001)

Hacemos un Hello World REACTIVE from /client/src/App.js
Creamos los componentes
rpc ::: --> react pure component

Queremos crear URLS especificas ara el front-end y siempre devolver NavBar, los otros dependiendo.
Estando en la carpeta /client/
npn i react-router-dom
---------------------------------------------------------------
---------------------------------------------------------------
USAREMOS MATERIAL utilizar

en la carpeta client, installamos Material utilizar
npm install @mui/material @emotion/react @emotion/styled

Luego ponemos la fuente Roboto front, en /client/public/index.html
<link
  rel="stylesheet"
  href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
/>
Font Icons tambien , ahi debajo de Roboto Font
Ademas vamos a instalar inconos svg con un modulo npm
npm install @mui/icons-material












express=require ('express');
app=express();

 >>{ Router } = require('express');
>> router = Router()
>>router.get('/', (req,res)=>{
    res.send('Hello World');
})
>>taskRoutes=require('')
>>app.use(taskRoutes);
>>app.listen(3000);